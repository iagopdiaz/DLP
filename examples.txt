true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:X. x in id_bool true;;
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in let prod = fix prodaux in prod 12 5

    (*SUM*)
    letrec sum: Nat -> Nat -> Nat = 
        lambda n : Nat. lambda m : Nat. if iszero n then m else succ(sum (pred n) m)
    in sum 12 37;;

    (* Product *)
    let prod =
        lambda n : Nat. lambda m : Nat. 
            (letrec aux : Nat -> Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. lambda k : Nat.
                if iszero n then 0
                else if iszero (pred n) then m
                    else (aux (pred n) (letrec sum : Nat -> Nat -> Nat =
                                    lambda i : Nat. lambda j : Nat. if iszero i then j else succ (sum (pred i) j) 
                                    in sum m k) k)
        in aux n m m)
    in prod 5 15;;

    (* Fibonacci *)
    let fib =
        lambda n : Nat.
            (letrec aux : Nat -> Nat -> Nat -> Nat = lambda n : Nat. lambda a : Nat. lambda b : Nat.
                if iszero n then a
                else (aux (pred n) (letrec sum : Nat -> Nat -> Nat =
                                    lambda i : Nat. lambda j : Nat. if iszero i then j else succ (sum (pred i) j) 
                                    in sum a b) a)
            in aux n 0 1
            )
    in fib 10;;
    
    (*Factorial*)
    let fact = 
        lambda n : Nat.
            (letrec factaux : Nat -> Nat -> Nat = lambda n : Nat. lambda acc : Nat.
                if iszero (pred n) then acc
                else (factaux (pred n) (
                    letrec prod : Nat -> Nat -> Nat -> Nat = lambda p : Nat. lambda q : Nat. lambda k : Nat.
                        if iszero p then 0
                        else if iszero (pred p) then q
                            else (prod (pred p) (letrec sum :  Nat -> Nat -> Nat = 
                                    lambda i : Nat. lambda j : Nat.
                                    if iszero i then j else succ(sum (pred i) j)
                                in sum q k) k)
                    in prod n acc acc))           
            in factaux n 1)
    in fact 5;;

(* Context *)
    (*Vals*)
    y = 3;;
    x = 6;;
    id = lambda x : Bool. x
    succ y;;
    (lambda n : Nat. pred n) x;;
    letrec sum: Nat -> Nat -> Nat = 
        lambda n : Nat. lambda m : Nat. if iszero n then m else succ(sum (pred n) m)
    in sum x y;;

    (*Types*)
    x = Nat;;
    X = Nat;;
    X;;
    Y = X;;

    X = Bool;;
    let id_bool = L x:X. x in id_bool true;;
    let id_bool = L x:Y. x in id_bool true;;
    

(* String *)

a = "testing strings";;
b = "aaa";;
c = concat a b;;
concat a "";;
length a;;
length b;;
length c;;
length "";;


(* Tuples *)
x = 3;;
tuple = {1,2,x,true};;
tuple.1;;
tuple.3;;
t = {tuple, 2,3};;
t.1.1;;

(* Record *)
r = {x = 1, y = 2 , z = {w = 3, t = 4}};;
r.x;;
r.z;;
r.z.w;;

(* List *)

nil[Nat];;
cons[Nat] 5 (nil[Nat]);;
empty_list = nil[Nat];;
list1 = cons[Nat] 22 (cons[Nat] 9 (cons[Nat] 15 (nil[Nat])));;
isnil[Nat] empty_list;;
isnil[Nat] list1;;
head[Nat] list1;;
tail[Nat] list1;;

len = letrec len : (Nat list) -> Nat = lambda l : Nat list. if (isnil[Nat] l) then 0 else (succ (len (tail[Nat] l)))
in len;;
len empty_list;;
len list1;;

list2 = cons[Nat] 12 (cons[Nat] 6 (cons[Nat] 11 (cons[Nat] 2 (nil[Nat]))));;



append = letrec append : (Nat list) -> (Nat list) -> Nat list = lambda ap1: Nat list. lambda ap2: Nat list.
	if (isnil[Nat] ap1) then
		ap2
	else
		if (isnil[Nat] (tail[Nat] ap1)) then	
			cons[Nat] (head[Nat] ap1) ap2
		else
			cons[Nat] (head[Nat] ap1) (append (tail[Nat] ap1) ap2) 
in append;;

append list1 list2;;

list_fib = cons[Nat] 5 (cons[Nat] 2 (cons[Nat] 8 (cons[Nat] 6 (nil[Nat]))));;


func = lambda x:Nat. fib x;;

map = letrec map : (Nat list) -> (Nat -> Nat) -> Nat list =
lambda lst: Nat list. lambda f: (Nat -> Nat). 
        if (isnil[Nat] (tail[Nat] lst)) then
                cons[Nat] (f (head[Nat] lst)) (nil[Nat])
        else
                cons[Nat] (f (head[Nat] lst)) (map (tail[Nat] lst) f)
in map;;
map list_fib func;;

(* Variants *)
Int = <pos:Nat, zero:Nat, neg:Nat>;;

p = <pos=3> as Int;;
l = <tpos=3> as Int;;
m = <pos=false> as Int;;


(* Subtyping *)

let idr = lambda r:{}. r in idr {x=0, y=1};;
(lambda r:{x:Nat}. r.x) {x=0, y=1};;

a = {x=1, y=1, z={x=1}};;
b = {x=1, y=1, z=a};;
(lambda r:{z:{x:Nat}}. (r.z).x) b;; 
(lambda r:{z:{x:Nat}}. (r.z).x) a;;




