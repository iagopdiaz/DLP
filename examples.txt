true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:Bool. x in id_bool true
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in let prod = fix prodaux in prod 12 5

    (*SUM*)
    letrec sum: Nat -> Nat -> Nat = 
        lambda n : Nat. lambda m : Nat. if iszero n then m else succ(sum (pred n) m)
    in sum 12 37;;

    (* Product *)
    let prod =
        lambda n : Nat. lambda m : Nat. 
            (letrec aux : Nat -> Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. lambda k : Nat.
                if iszero n then 0
                else if iszero (pred n) then m
                    else (aux (pred n) (letrec sum : Nat -> Nat -> Nat =
                                    lambda i : Nat. lambda j : Nat. if iszero i then j else succ (sum (pred i) j) 
                                    in sum m k) k)
        in aux n m m)
    in prod 5 15;;

    (* Fibonacci *)
    let fib =
        lambda n : Nat.
            (letrec aux : Nat -> Nat -> Nat -> Nat = lambda n : Nat. lambda a : Nat. lambda b : Nat.
                if iszero n then a
                else (aux (pred n) (letrec sum : Nat -> Nat -> Nat =
                                    lambda i : Nat. lambda j : Nat. if iszero i then j else succ (sum (pred i) j) 
                                    in sum a b) a)
            in aux n 0 1
            )
    in fib 10;;
    
    (*Factorial*)
    let fact = 
        lambda n : Nat.
            (letrec factaux : Nat -> Nat -> Nat = lambda n : Nat. lambda acc : Nat.
                if iszero (pred n) then acc
                else (factaux (pred n) (
                    letrec prod : Nat -> Nat -> Nat -> Nat = lambda p : Nat. lambda q : Nat. lambda k : Nat.
                        if iszero p then 0
                        else if iszero (pred p) then q
                            else (prod (pred p) (letrec sum :  Nat -> Nat -> Nat = 
                                    lambda i : Nat. lambda j : Nat.
                                    if iszero i then j else succ(sum (pred i) j)
                                in sum q k) k)
                    in prod n acc acc))           
            in factaux n 1)
    in fact 5;;

(* Context *)
    y = 3;;
    x = 6;;
    id = lambda x : Bool. x
    succ y;;
    (lambda n : Nat. pred n) x;;
    letrec sum: Nat -> Nat -> Nat = 
        lambda n : Nat. lambda m : Nat. if iszero n then m else succ(sum (pred n) m)
    in sum x y;;
